#include "nflash_spi_2.h"
#include "wait_api.h"
#include "stdio.h"
//
// InstructionsCode
//
enum {
    //Instruction set
    SPI_FLASH_INS_WREN        = 0x06,		// write enable
    SPI_FLASH_INS_WRDI        = 0x04,		// write disable
    SPI_FLASH_INS_RDSR        = 0x05,		// read status register
    SPI_FLASH_INS_WRSR        = 0x01,		// write status register
    SPI_FLASH_INS_READ        = 0x03,		// read data bytes
    SPI_FLASH_INS_FAST_READ   = 0x0B,		// read data bytes at higher speed
    SPI_FLASH_INS_PP          = 0x02,		// page program
    SPI_FLASH_INS_SE_64K      = 0xD8,   // block erase 64KB
    SPI_FLASH_INS_SE_4K       = 0x20,   // sector erase 4KB
    SPI_FLASH_INS_SE_32K      = 0x52,   // sector erase 32KB
    SPI_FLASH_INS_RES         = 0xAB,		// release from deep power-down
    SPI_FLASH_INS_DP          = 0xB9,		// deep power-down
    SPI_FLASH_INS_RDID        = 0x90,		// read identification
    SPI_FLASH_INS_BE          = 0xC7,		// bulk erase
    SPI_FLASH_INS_DUMMY       = 0xAA
};

/*******************************************************************************
Flash Status Register Definitions (see Datasheet)
*******************************************************************************/
enum {
    SPI_FLASH_SRWD	= 0x80,				// Status Register Write Protect
    SPI_FLASH_BP2	= 0x10,				// Block Protect Bit2
    SPI_FLASH_BP1	= 0x08,				// Block Protect Bit1
    SPI_FLASH_BP0	= 0x04,				// Block Protect Bit0
    SPI_FLASH_WEL	= 0x02,				// write enable latch
    SPI_FLASH_WIP	= 0x01				// write/program/erase in progress indicator
};


#define SPI_BUFFER_SIZE 10
static uint8_t  b_flash_pd_flag;


SPI_FLASH::SPI_FLASH(PinName mosi, PinName miso, PinName sck, PinName ncs, const char* name):
_spi(mosi, miso, sck), _CS(ncs){
	spi_flash_init();
}
SPI_FLASH::~SPI_FLASH(){

}


/*----------------------------------------------------------------------------------
*  Function:	void NOR_init(void)
*
*  Description:
*	Init the SPI interface
*
*----------------------------------------------------------------------------------*/
void SPI_FLASH::spi_flash_init(void)
{
#ifndef _CLING_PC_SIMULATION_
    uint8_t buf[SPI_BUFFER_SIZE];

    // Power up the chip
    spi_flash_power_down();
   // b_flash_pd_flag = true;

    // Read ID
    spi_flash_read_id((uint8_t *)buf);

    //cling.whoami.nor[0] = buf[0];
    //cling.whoami.nor[1] = buf[1];
#endif
}

int SPI_FLASH::read_write(char *d, size_t rx_size, char *s, size_t tx_size)
{
		size_t size;
    _CS = 0;
			for(size = (rx_size > tx_size)?tx_size:rx_size; size>0; size--,d++, s++){
				*d = _spi.write(*s);
			}
			for(size = (rx_size > tx_size)?(rx_size-tx_size):(tx_size-rx_size); size>0; size--,d++, s++){
				(rx_size > tx_size)?(*d = _spi.write(NULL)):(_spi.write(*s));
			}
    _CS = 1;
	
}

void SPI_FLASH::_wait_for_operation_completed()
{
#ifndef _CLING_PC_SIMULATION_
    uint32_t count = 0;
    uint8_t ret;
    // Maximum delay 2 seconds
    for (count = 0; count < 2000; count ++) {
        ret = spi_flash_read_status_register();
        if (ret & SPI_FLASH_WIP) {
            wait_ms(1);
        } else {
            break;
        }
    }
#endif
}

/*----------------------------------------------------------------------------------
*  Function:	void spi_flash_write_enable(void)
*
*  Description:
*	send the write enable command (0x06), all write or erase operation must send
*  the command firstly
*
*----------------------------------------------------------------------------------*/
void SPI_FLASH::spi_flash_write_enable(void)
{
		uint8_t spi_tx_buf[SPI_BUFFER_SIZE];
		uint8_t spi_rx_buf[SPI_BUFFER_SIZE];
    uint8_t i = 0;
    spi_tx_buf[i++] = SPI_FLASH_INS_WREN;
    //N_SPRINTF("[spi] 1624");
     read_write(spi_tx_buf, spi_rx_buf,0, GPIO_SPI_0_CS_NFLASH);
    //_wait_for_operation_completed();
}

void SPI_FLASH::spi_flash_write_disable(void)
{
		uint8_t spi_tx_buf[SPI_BUFFER_SIZE];
		//uint8_t spi_rx_buf[SPI_BUFFER_SIZE];
    spi_tx_buf[0] = SPI_FLASH_INS_WRDI;
#ifndef _CLING_PC_SIMULATION_
    //	N_SPRINTF("[spi] 123");
    // SPI_master_tx_rx(SPI_MASTER_0, spi_tx_buf, 1, spi_rx_buf,0, GPIO_SPI_0_CS_NFLASH);
#endif
}
/*----------------------------------------------------------------------------------
*  Function:	uint8_t spi_flash_read_status_register(void)
*
*  Description:
*	read status register (0x04), return the status register value
*
*----------------------------------------------------------------------------------*/
uint8_t SPI_FLASH::spi_flash_read_status_register(void)
{
		uint8_t spi_rx_buf[SPI_BUFFER_SIZE];
		uint8_t spi_tx_buf[SPI_BUFFER_SIZE];
		uint8_t i = 0;
		//uint8_t spi_rx_buf[SPI_BUFFER_SIZE];
    spi_tx_buf[i++] = SPI_FLASH_INS_RDSR;
    spi_tx_buf[i++] = SPI_FLASH_INS_DUMMY;
#ifndef _CLING_PC_SIMULATION_
    //SPI_master_tx_rx(SPI_MASTER_0, spi_tx_buf, 2, spi_rx_buf,  2,GPIO_SPI_0_CS_NFLASH);
#endif
    return spi_rx_buf[1];
}
/*----------------------------------------------------------------------------------
*  Function:	void NOR_readData(uint32_t addr, uint16_t len, uint8_t *dataBuf)
*
*  Description:
*	read the len's data to dataBuf
*  addr: the 24 bit address
*  len: read length
*  dataBuf: the out data buf
*
*----------------------------------------------------------------------------------*/
void SPI_FLASH::spi_flash_read_data(uint32_t addr, uint16_t len, uint8_t *dataBuf)
{
		uint8_t spi_tx_buf[SPI_BUFFER_SIZE];
    uint8_t i = 0;
    spi_tx_buf[i++] = SPI_FLASH_INS_READ;
    spi_tx_buf[i++] = (uint8_t)(addr >> 16);
    spi_tx_buf[i++] = (uint8_t)(addr >> 8);
    spi_tx_buf[i++] = (uint8_t)(addr);

//	N_SPRINTF("[NFLASH] %x %x %x %x", spi_tx_buf[0], spi_tx_buf[1], spi_tx_buf[2], spi_tx_buf[3]);
    uint32_t rx_data[65];

#ifndef _CLING_PC_SIMULATION_
//	SPI_master_tx_rx(SPI_MASTER_0, spi_tx_buf, 4, (uint8_t *)rx_data,len +4 , GPIO_SPI_0_CS_NFLASH);
//	memcpy(dataBuf,&rx_data[1],len);
#endif


}
/*----------------------------------------------------------------------------------
*  Function:	void spi_flash_page_program(uint32_t addr, uint16_t len, uint8_t *data)
*
*  Description:
*	read the len's data to dataBuf
*  addr: the 24 bit address
*  len: write length, must <=256
*  data: the write data buf
*
*----------------------------------------------------------------------------------*/
void SPI_FLASH::_page_program_core(uint32_t addr, uint16_t len, uint8_t *data)
{
		uint8_t spi_tx_buf[SPI_BUFFER_SIZE];
		uint8_t i = 0;
    spi_flash_write_enable();

    spi_tx_buf[i++] = SPI_FLASH_INS_PP;
    spi_tx_buf[i++] = (uint8_t)(addr >> 16);
    spi_tx_buf[i++] = (uint8_t)(addr >> 8);
    spi_tx_buf[i++] = (uint8_t)(addr);
    uint32_t tx_data[65];
    memcpy(tx_data, spi_tx_buf, 4);
    memcpy(&tx_data[1], data, len);

#ifndef _CLING_PC_SIMULATION_
    //	SPI_master_tx_rx(SPI_MASTER_0, (uint8_t *)tx_data, len + 4, spi_rx_buf,0, GPIO_SPI_0_CS_NFLASH);
#endif
    //	_wait_for_operation_completed();
}



#ifdef SPI_FLASH_PAGE_SIZE
#undef SPI_FLASH_PAGE_SIZE
#endif
#define SPI_FLASH_PAGE_SIZE 0xff
void SPI_FLASH::spi_flash_page_program(uint32_t addr, uint16_t len, uint8_t *data)
{
    uint32_t start_addr = addr;
    uint32_t end_addr = addr + len - 1;
    uint32_t length_1, length_2;
    //
    // Note, page size is 256 bytes, and it can only be programmed within the page.
    //
    // if we cross the page boundary, we have to seperate it into two parts.
    //
    start_addr &= ~((uint32_t)SPI_FLASH_PAGE_SIZE);;
    end_addr   &= ~((uint32_t)SPI_FLASH_PAGE_SIZE);;

    if (start_addr == end_addr) {
        _page_program_core(addr, len, data);
    } else {
        // First page
        length_1 = SPI_FLASH_PAGE_SIZE - (addr - start_addr);
        _page_program_core(addr, length_1, data);

        // Second page
        addr += length_1;
        length_2 = len - length_1;
        _page_program_core(addr, length_2, data + length_1);
    }

}
/*----------------------------------------------------------------------------------
*  Function:	spi_flash_erase_block_4k(uint32_t addr)
*
*  Description:
*	erase the sector(4K Bytes)
*  addr: the 24 bit address
*
*
*----------------------------------------------------------------------------------*/
void SPI_FLASH::spi_flash_erase_block_4k(uint32_t addr)
{
		uint8_t spi_tx_buf[SPI_BUFFER_SIZE];
		uint8_t i = 0;
    spi_flash_write_enable();

    spi_tx_buf[i++] = SPI_FLASH_INS_SE_4K;
    spi_tx_buf[i++] = (uint8_t)(addr >> 16);
    spi_tx_buf[i++] = (uint8_t)(addr >> 8);
    spi_tx_buf[i++] = (uint8_t)(addr);

   // N_SPRINTF("[NFLASH] %x %x %x %x", spi_tx_buf[0], spi_tx_buf[1], spi_tx_buf[2], spi_tx_buf[3]);
#ifndef _CLING_PC_SIMULATION_
   // SPI_master_tx_rx(SPI_MASTER_0, spi_tx_buf, 4, spi_rx_buf,  0, GPIO_SPI_0_CS_NFLASH);
#endif
    //wait for the operation finished
    _wait_for_operation_completed();

}

/*----------------------------------------------------------------------------------
*  Function:	NOR_erase_block_32k(uint32_t addr)
*
*  Description:
*	erase the 32K block
*  addr: the 24 bit address
*
*
*----------------------------------------------------------------------------------*/
void SPI_FLASH::nor_flash_erase_block_32k(uint32_t addr)
{
		uint8_t spi_tx_buf[SPI_BUFFER_SIZE];
		uint8_t i = 0;
    spi_flash_write_enable();

    spi_tx_buf[i++] = (uint8_t)SPI_FLASH_INS_SE_32K;
    spi_tx_buf[i++] = (uint8_t)(addr >> 16);
    spi_tx_buf[i++] = (uint8_t)(addr >> 8);
    spi_tx_buf[i++] = (uint8_t)(addr);
   // N_SPRINTF("[NFLASH] %x %x %x %x", spi_tx_buf[0], spi_tx_buf[1], spi_tx_buf[2], spi_tx_buf[3]);
#ifndef _CLING_PC_SIMULATION_
//    SPI_master_tx_rx(SPI_MASTER_0, spi_tx_buf, 4, spi_rx_buf,  0, GPIO_SPI_0_CS_NFLASH);
#endif
    //wait for the operation finished
    _wait_for_operation_completed();


}
/*----------------------------------------------------------------------------------
*  Function:	spi_flash_erase_block_64k(uint32_t addr)
*
*  Description:
*	erase the 64K block
*  addr: the 24 bit address
*
*----------------------------------------------------------------------------------*/
void SPI_FLASH::spi_flash_erase_block_64k(uint32_t addr)
{
		uint8_t spi_tx_buf[SPI_BUFFER_SIZE];
    uint8_t i = 0;
    spi_flash_write_enable();
    spi_tx_buf[i++] = SPI_FLASH_INS_SE_64K;
    spi_tx_buf[i++] = (uint8_t)(addr >> 16);
    spi_tx_buf[i++] = (uint8_t)(addr >> 8);
    spi_tx_buf[i++] = (uint8_t)(addr);
    //N_SPRINTF("[NFLASH] %x %x %x %x", spi_tx_buf[0], spi_tx_buf[1], spi_tx_buf[2], spi_tx_buf[3]);
#ifndef _CLING_PC_SIMULATION_
//    SPI_master_tx_rx(SPI_MASTER_0, spi_tx_buf, 4, spi_rx_buf,  0, GPIO_SPI_0_CS_NFLASH);
#endif
    //N_SPRINTF("[NFLASH] waiting ...");
    //wait for the operation finished
    _wait_for_operation_completed();
   // N_SPRINTF("[NFLASH] completed!");


}
/*----------------------------------------------------------------------------------
*  Function:	spi_flash_chip_erase
*
*  Description:
*	erase the 64K block
*
*----------------------------------------------------------------------------------*/
void SPI_FLASH::spi_flash_chip_erase()
{
		uint8_t spi_tx_buf[SPI_BUFFER_SIZE];
    uint8_t i = 0;
    spi_flash_write_enable();

    spi_tx_buf[i++] = SPI_FLASH_INS_BE;

#ifndef _CLING_PC_SIMULATION_
//    SPI_master_tx_rx(SPI_MASTER_0, spi_tx_buf, 1,  spi_rx_buf,  0, GPIO_SPI_0_CS_NFLASH);
#endif
    //wait for the operation finished
    _wait_for_operation_completed();


}
/*----------------------------------------------------------------------------------
*  Function:	void spi_flash_power_down()
*
*  Description:
*  power down the nor flash to save the power consumption
*
*------------------------- ---------------------------------------------------------*/
void SPI_FLASH::spi_flash_power_down()
{
		uint8_t spi_tx_buf[SPI_BUFFER_SIZE];
    uint8_t i = 0;
    spi_tx_buf[i++] = SPI_FLASH_INS_DP;

#ifndef _CLING_PC_SIMULATION_
//    SPI_master_tx_rx(SPI_MASTER_0, spi_tx_buf, 1, spi_rx_buf, 0, GPIO_SPI_0_CS_NFLASH);
#endif
}

/*----------------------------------------------------------------------------------
*  Function:	void spi_flash_release_power_down()
*
*  Description:
*  exit the power down mode for normal operation
*
*----------------------------------------------------------------------------------*/
void SPI_FLASH::spi_flash_release_power_down()
{
		uint8_t spi_tx_buf[SPI_BUFFER_SIZE];
    uint8_t i = 0;
    spi_tx_buf[i] = SPI_FLASH_INS_RES;

#ifndef _CLING_PC_SIMULATION_
//    SPI_master_tx_rx(SPI_MASTER_0, spi_tx_buf, 1, spi_rx_buf,  0, GPIO_SPI_0_CS_NFLASH);
#endif
}
/*----------------------------------------------------------------------------------
*  Function:	void spi_flash_read_id(uint8_t *id)
*
*  Description:
*  read the manufacture ID and device ID
*	id: the array of uint8_t, the length >2
*
*----------------------------------------------------------------------------------*/
void SPI_FLASH::spi_flash_read_id(uint8_t *id)
{
		uint8_t spi_tx_buf[SPI_BUFFER_SIZE];
		uint8_t spi_rx_buf[SPI_BUFFER_SIZE];
    uint8_t i = 0;
    spi_tx_buf[i++] = SPI_FLASH_INS_RDID;
    spi_tx_buf[i++] = (uint8_t)0;
    spi_tx_buf[i++] = (uint8_t)0;
    spi_tx_buf[i++] = (uint8_t)0;
    spi_tx_buf[i++] = (uint8_t)0;
    spi_tx_buf[i++] = (uint8_t)0;
#ifndef _CLING_PC_SIMULATION_
//    SPI_master_tx_rx(SPI_MASTER_0, spi_tx_buf, 1, spi_rx_buf,  6, GPIO_SPI_0_CS_NFLASH);
#endif
    *id = spi_rx_buf[4];
    *(id + 1) = spi_rx_buf[5];

}

