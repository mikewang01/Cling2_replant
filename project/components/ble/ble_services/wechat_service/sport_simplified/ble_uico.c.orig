/* Copyright (c) 2012 Nordic Semiconductor. All Rights Reserved.
 *
 * The information contained herein is property of Nordic Semiconductor ASA.
 * Terms and conditions of usage are described in detail in NORDIC
 * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
 *
 * Licensees are granted free, non-transferable use of the information. NO
 * WARRANTY of ANY KIND is provided. This heading must NOT be removed from
 * the file.
 *
 */

/* Attention!
*  To maintain compliance with Nordic Semiconductor ASA’s Bluetooth profile
*  qualification listings, this section of source code must not be modified.
*/

#include "ble_uico.h"
#include <string.h>
#include "nordic_common.h"
#include "ble_srv_common.h"
#include "app_util.h"
#include "main.h"
#include <absacc.h>  
#define INVALID_BATTERY_LEVEL 255

typedef enum
{
    READ_REQ,      /**< Type identifying that this tx_message is a read request. */
    WRITE_REQ      /**< Type identifying that this tx_message is a write request. */
} tx_request_t;

/**@brief Structure for writing a message to the peer, i.e. CCCD.
 */
typedef struct
{
    uint8_t                  gattc_value[20];  /**< The message to write. */
    ble_gattc_write_params_t gattc_params;                       /**< The GATTC parameters for this message. */
} write_params_t;

/**@brief Structure for holding the data that will be transmitted to the connected central.
 */
typedef struct
{
    uint16_t     conn_handle;  /**< Connection handle to be used when transmitting this message. */
    tx_request_t type;         /**< Type of message. (read or write). */
    union
    {
        uint16_t       read_handle;  /**< Read request handle. */
        write_params_t write_req;    /**< Write request message. */
    } req;
} tx_message_t;


//static ble_uico_c_t * mp_ble_bas_c;                 /**< Pointer to the current instance of the BAS Client module. The memory for this is provided by the application.*/
static tx_message_t  m_tx_buffer[10];  /**< Transmit buffer for the messages that will be transmitted to the central. */
static uint32_t      m_tx_insert_index = 0;        /**< Current index in the transmit buffer where the next message should be inserted. */
static uint32_t      m_tx_index        = 0;        /**< Current index in the transmit buffer containing the next message to be transmitted. */

#define TX_BUFFER_MASK 0x07
/**@brief Function for passing any pending request from the buffer to the stack.
 */
#define UICO_UUID_BASE {0x66, 0x9A, 0x0C, 0x20, 0x00, 0x08, 0x9A, 0x94,\
                        0xE3, 0x11, 0x7B, 0x66, 0x00, 0x55, 0x4E, 0x6A };

#define UICO_UUID_SERVICE       0x5500
#define UICO_LEN_NOTIFY_UUID    0x5501
#define UICO_FRAME1_UUID        0x5502
#define UICO_FRAME2_UUID        0x5503
#define FIRST_HANDLE    0x0001
#define LAST_HANDLE     0xFFFF

static void tx_buffer_process(void);                       
static ble_uico_t * p_bas_local = NULL;
static void tx_send(ble_uico_t * p_ble_nus_c, uint16_t handle, char *str , uint16_t len);
int transfer_data_to_uico_touch(uint8_t *buffer_p, uint16_t tx_lenth, uint16_t *rx_lenth_p);
/**@brief Function for handling the Connect event.
 *
 * @param[in]   p_bas       Battery Service structure.
 * @param[in]   p_ble_evt   Event received from the BLE stack.
 */
static void on_connect(ble_uico_t * p_bas, ble_evt_t * p_ble_evt)
{
    p_bas->conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
}


/**@brief Function for handling the Disconnect event.
 *
 * @param[in]   p_bas       Battery Service structure.
 * @param[in]   p_ble_evt   Event received from the BLE stack.
 */
static void on_disconnect(ble_uico_t * p_bas, ble_evt_t * p_ble_evt)
{
    UNUSED_PARAMETER(p_ble_evt);
    p_bas->conn_handle = BLE_CONN_HANDLE_INVALID;
      ble_uico_evt_t evt;
 
                    evt.evt_type = BLE_UICO_EVT_TEST_TOOL_DISCONNECTED ;
                p_bas->evt_handler(p_bas, &evt);
}


/**@brief Function for notidfying pc the data over ble
 *
 * @param[in]   p_bas       Battery Service structure.
 * @param[in]   p_ble_evt   Event received from the BLE stack.
 */

int ble_uico_notify_data_to_pc(ble_uico_t * p_bas, ble_gatts_char_handles_t handle, uint8_t *buffer, uint16_t lenth)
{
    tx_send(p_bas, handle.value_handle, buffer , lenth);
}
/**@brief Function for notidfying pc the data over ble
 *
 * @param[in]   p_bas       Battery Service structure.
 * @param[in]   p_ble_evt   Event received from the BLE stack.
 */
static int (*ble_recievd_callback)(uint8_t *, uint16_t) = NULL;
int ble_uico_recieve_data_from_pc_register( int (*p)(uint8_t *, uint16_t))
{
    if(p != NULL){
        ble_recievd_callback = p;
    }
    return true;
}
/**@brief Function for handling the Write event.
 *
 * @param[in]   p_bas       Battery Service structure.
 * @param[in]   p_ble_evt   Event received from the BLE stack.
 */
static void on_write(ble_uico_t * p_bas, ble_evt_t * p_ble_evt)
{
    
       
    if (p_bas->is_notification_supported) {
        ble_gatts_evt_write_t * p_evt_write = &p_ble_evt->evt.gatts_evt.params.write;
        int i =0;
        for(i=0; i<4 ;i++){
            int k = 0;
            if ((p_evt_write->handle == p_bas->battery_level_handles[i].cccd_handle)){
                 Y_SPRINTF("[UICO BLE] cccd_handle %d DATA RECIEVED lenth = %d",i, p_evt_write->len);
                 for(k=0; k < p_evt_write->len ;k++){
                    Y_SPRINTF("0x%02x",p_evt_write->data[k]);
                 }
                 
                 /*notice uuper layer this device has been connected with pc tool*/
                 ble_uico_evt_t evt;

                if (ble_srv_is_notification_enabled(p_evt_write->data)) {
                    evt.evt_type = BLE_UICO_EVT_NOTIFICATION_ENABLED;
                } else {
                    evt.evt_type = BLE_UICO_EVT_NOTIFICATION_DISABLED;
                }
                p_bas->evt_handler(p_bas, &evt);
                
            }
            if ((p_evt_write->handle == p_bas->battery_level_handles[i].value_handle)){
                Y_SPRINTF("[UICO BLE] value_handle %d DATA RECIEVED lenth = %d",i, p_evt_write->len);
                    for(k=0; k < p_evt_write->len ;k++){
                    Y_SPRINTF("0x%02x",p_evt_write->data[k]);
                 }
                    
                 /*if recieve callback function existed then call it*/
                  uint8_t buffer1[42]; 
                  memcpy(buffer1, p_evt_write->data, p_evt_write->len);
                 if(ble_recievd_callback != NULL){
                    ble_recievd_callback(buffer1, p_evt_write->len);
                 }
 #if 0
                        uint8_t buffer1[20];
                        uint8_t buffer2[20];
                        uint16_t lenth_in = p_evt_write->len - 1;
                        uint16_t lenth_out;
                 
                        memcpy(buffer1, p_evt_write->data + 1, lenth_in);                       
                        transfer_data_to_uico_touch(buffer1, lenth_in, &lenth_out); 
                        
                        buffer2[0] = 0x02;
                        memcpy(buffer2+1, buffer1, lenth_out);
                        lenth_out++;
                   // tx_send(p_bas, p_bas->battery_level_handles[0].value_handle, &lenth , 1);
                        tx_send(p_bas, p_evt_write->handle, buffer2 , lenth_out);
 #endif
            }
        }
        
        
        if (
    
            (p_evt_write->handle == p_bas->battery_level_handles[0].cccd_handle)
            &&
            (p_evt_write->len == 2)
        ) {
            // CCCD written, call application event handler
            if (p_bas->evt_handler != NULL) {
                ble_uico_evt_t evt;

                if (ble_srv_is_notification_enabled(p_evt_write->data)) {
                    evt.evt_type = BLE_UICO_EVT_NOTIFICATION_ENABLED;
                } else {
                    evt.evt_type = BLE_UICO_EVT_NOTIFICATION_DISABLED;
                }

                p_bas->evt_handler(p_bas, &evt);
            }
        }
    }
}


void ble_uico_on_ble_evt(ble_evt_t * p_ble_evt)
{
    ble_uico_t * p_bas = p_bas_local;
    switch (p_ble_evt->header.evt_id) {
        case BLE_GAP_EVT_CONNECTED:
            on_connect(p_bas, p_ble_evt);
            break;

        case BLE_GAP_EVT_DISCONNECTED:
            on_disconnect(p_bas, p_ble_evt);
            break;
        case  BLE_EVT_TX_COMPLETE:
            //Y_SPRINTF("[%s]:BLE_EVT_TX_COMPLETEP\r\n", __FUNCTION__);
            tx_buffer_process();
            break;
        case BLE_GATTS_EVT_WRITE:
            on_write(p_bas, p_ble_evt);
            break;
           case BLE_GATTC_EVT_WRITE_RSP:
            Y_SPRINTF("[%s]:BLE_GATTC_EVT_WRITE_RSP\r\n", __FUNCTION__);
            tx_buffer_process();
            break;

        case BLE_GATTC_EVT_READ_RSP:
            Y_SPRINTF("[%s]:BLE_GATTC_EVT_READ_RSP\r\n", __FUNCTION__);
            break;
        default:
            // No implementation needed.
            break;
    }

}


/**@brief Function for adding the Battery Level characteristic.
 *
 * @param[in]   p_bas        Battery Service structure.
 * @param[in]   p_bas_init   Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
static uint32_t battery_level_char_add(ble_uico_t * p_bas, const ble_uico_init_t * p_bas_init)
{
    uint32_t            err_code;
    ble_gatts_char_md_t char_md;
    ble_gatts_attr_md_t cccd_md;
    ble_gatts_attr_t    attr_char_value;
    ble_uuid_t          ble_uuid;
    ble_gatts_attr_md_t attr_md;
    uint8_t             initial_battery_level[20];
    uint8_t             encoded_report_ref[BLE_SRV_ENCODED_REPORT_REF_LEN];
    uint8_t             init_len;
    int i = 0;
#if 1
    p_bas->is_notification_supported =   p_bas_init->support_notification;
    // Add Battery Level characteristic
    if (p_bas->is_notification_supported) {
        memset(&cccd_md, 0, sizeof(cccd_md));

        // According to BAS_SPEC_V10, the read operation on cccd should be possible without
        // authentication.
        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&cccd_md.read_perm);
        cccd_md.write_perm = p_bas_init->battery_level_char_attr_md.cccd_write_perm;
        cccd_md.vloc       = BLE_GATTS_VLOC_STACK;
    }
#endif
    memset(&char_md, 0, sizeof(char_md));
    char_md.char_props.write =  1;
    char_md.char_props.read   = 0;
    char_md.char_props.notify = (p_bas->is_notification_supported) ? 1 : 0;
    char_md.p_char_user_desc  = NULL;
    char_md.p_char_pf         = NULL;
    char_md.p_user_desc_md    = NULL;
    char_md.p_cccd_md         = (p_bas->is_notification_supported) ? &cccd_md : NULL;
    char_md.p_sccd_md         = NULL;

    //BLE_UUID_BLE_ASSIGN(ble_uuid, UICO_LEN_NOTIFY_UUID);
    ble_uuid.uuid = UICO_LEN_NOTIFY_UUID;
    ble_uuid.type = p_bas->uuid_type;//p_bas->uuid_type;

    memset(&attr_md, 0, sizeof(attr_md));

    attr_md.read_perm  = p_bas_init->battery_level_char_attr_md.read_perm;
    attr_md.write_perm = p_bas_init->battery_level_char_attr_md.write_perm;
    attr_md.vloc       = BLE_GATTS_VLOC_STACK;
    attr_md.rd_auth    = 0;
    attr_md.wr_auth    = 0;
    attr_md.vlen       = 1;

    initial_battery_level[0] = p_bas_init->initial_batt_level[0];

    memset(&attr_char_value, 0, sizeof(attr_char_value));

    attr_char_value.p_uuid    = &ble_uuid;
    attr_char_value.p_attr_md = &attr_md;
    attr_char_value.init_len  = sizeof(uint8_t);
    attr_char_value.init_offs = 0;
    attr_char_value.max_len   = 20;
    attr_char_value.p_value   = NULL;//initial_battery_level;

    err_code = sd_ble_gatts_characteristic_add(p_bas->service_handle, &char_md,
               &attr_char_value,
               &p_bas->battery_level_handles[i++]);

    if (err_code != NRF_SUCCESS) {
        return err_code;
    }
    //BLE_UUID_BLE_ASSIGN(ble_uuid, UICO_LEN_NOTIFY_UUID);
    ble_uuid.uuid = UICO_FRAME1_UUID;
    ble_uuid.type = p_bas->uuid_type;
    err_code = sd_ble_gatts_characteristic_add(p_bas->service_handle, &char_md,
               &attr_char_value,
               &p_bas->battery_level_handles[i++]);

    //BLE_UUID_BLE_ASSIGN(ble_uuid, UICO_LEN_NOTIFY_UUID);
    ble_uuid.uuid = UICO_FRAME2_UUID;
    ble_uuid.type = p_bas->uuid_type;//p_bas->uuid_type;
    err_code = sd_ble_gatts_characteristic_add(p_bas->service_handle, &char_md,
               &attr_char_value,
               &p_bas->battery_level_handles[i++]);


    p_bas->report_ref_handle = BLE_GATT_HANDLE_INVALID;


    return NRF_SUCCESS;
}

/**@brief Function for adding the Battery Level characteristic.
 *
 * @param[in]   p_bas        Battery Service structure.
 * @param[in]   p_bas_init   Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_uico_init(ble_uico_t * p_bas, const ble_uico_init_t * p_bas_init)
{
    uint32_t   err_code;
    ble_uuid_t ble_uuid;
#if 1
    ble_uuid128_t base_uuid = UICO_UUID_BASE;
    err_code = sd_ble_uuid_vs_add(&base_uuid, &(p_bas->uuid_type));
    if (err_code != NRF_SUCCESS) {
        return err_code;
    }
#endif
    p_bas_local = p_bas;
    // Initialize service structure
    p_bas->evt_handler               = p_bas_init->evt_handler;
    p_bas->conn_handle               = BLE_CONN_HANDLE_INVALID;
    p_bas->is_notification_supported = p_bas_init->support_notification;
    //p_bas->battery_level_last[0]        = NULL;

    // Add service
    BLE_UUID_BLE_ASSIGN(ble_uuid, UICO_UUID_SERVICE);
    /*16bytes */
    ble_uuid.type = p_bas->uuid_type;

    err_code = sd_ble_gatts_service_add(BLE_GATTS_SRVC_TYPE_PRIMARY, &ble_uuid, &p_bas->service_handle);
    if (err_code != NRF_SUCCESS) {
        return err_code;
    }

    // Add battery level characteristic
    return battery_level_char_add(p_bas, p_bas_init);
}


uint32_t ble_uico_battery_level_update(ble_uico_t * p_bas, uint8_t battery_level)
{
    uint32_t err_code = NRF_SUCCESS;
    ble_gatts_value_t gatts_value;

    if (battery_level != p_bas->battery_level_last[0]) {
        // Initialize value struct.
        memset(&gatts_value, 0, sizeof(gatts_value));

        gatts_value.len     = sizeof(uint8_t);
        gatts_value.offset  = 0;
        gatts_value.p_value = &battery_level;

        // Save new battery value.
        p_bas->battery_level_last[0] = battery_level;

        // Update database.
        err_code = sd_ble_gatts_value_set(p_bas->conn_handle,
                                          p_bas->battery_level_handles[0].value_handle,
                                          &gatts_value);
        if (err_code != NRF_SUCCESS) {
            return err_code;
        }

        // Send value if connected and notifying.
        if ((p_bas->conn_handle != BLE_CONN_HANDLE_INVALID) && p_bas->is_notification_supported) {
            ble_gatts_hvx_params_t hvx_params;

            memset(&hvx_params, 0, sizeof(hvx_params));

            hvx_params.handle = p_bas->battery_level_handles[0].value_handle;
            hvx_params.type   = BLE_GATT_HVX_NOTIFICATION;
            hvx_params.offset = gatts_value.offset;
            hvx_params.p_len  = &gatts_value.len;
            hvx_params.p_data = gatts_value.p_value;

            err_code = sd_ble_gatts_hvx(p_bas->conn_handle, &hvx_params);
        } else {
            err_code = NRF_ERROR_INVALID_STATE;
        }
    }

    return err_code;
}
/*********************************************************************
 * @fn      send_message
 *
 * @brief   This function is used for sending messge to specific task.
 *
 * @param   task_id,message_type.
 *
 * @return  LX_OK ,LX_OK
 */

static void tx_buffer_process(void)
{
    if (m_tx_index != m_tx_insert_index)
    {
        uint32_t err_code;

        if (m_tx_buffer[m_tx_index].type == READ_REQ)
        {
            err_code = sd_ble_gattc_read(m_tx_buffer[m_tx_index].conn_handle,
                                         m_tx_buffer[m_tx_index].req.read_handle,
                                         0);
        }
        else
        {
            /*
            err_code = sd_ble_gattc_write(m_tx_buffer[m_tx_index].conn_handle,
                                          &m_tx_buffer[m_tx_index].req.write_req.gattc_params);
            */
            
              ble_gatts_value_t gatts_value;

     {
         ble_gatts_value_t gatts_value;
        // Initialize value struct.
        memset(&gatts_value, 0, sizeof(gatts_value));

        gatts_value.len     = m_tx_buffer[m_tx_index].req.write_req.gattc_params.len;
        gatts_value.offset  = m_tx_buffer[m_tx_index].req.write_req.gattc_params.offset;
        gatts_value.p_value = m_tx_buffer[m_tx_index].req.write_req.gattc_value;


        // Update database.
        err_code = sd_ble_gatts_value_set(m_tx_buffer[m_tx_index].conn_handle,
                                          m_tx_buffer[m_tx_index].req.write_req.gattc_params.handle,
                                          &gatts_value);
        if (err_code != NRF_SUCCESS) {
            return ;
        }
        
            ble_gatts_hvx_params_t hvx_params;
        
            memset(&hvx_params, 0, sizeof(hvx_params));

            hvx_params.handle = m_tx_buffer[m_tx_index].req.write_req.gattc_params.handle;
            hvx_params.type   = BLE_GATT_HVX_NOTIFICATION;
            hvx_params.offset = 0;//20-lenth-1;//gatts_value.offset;
            hvx_params.p_len  = &(gatts_value.len);
            hvx_params.p_data = gatts_value.p_value;
            Y_SPRINTF("[ble_uico]: data lenth = %d..\r\n",*(hvx_params.p_len));
            err_code = sd_ble_gatts_hvx(m_tx_buffer[m_tx_index].conn_handle, &hvx_params);
    }
}
        if (err_code == NRF_SUCCESS)
        {
            Y_SPRINTF("[ble_uico]: SD Read/Write API returns Success..\r\n");
            m_tx_index++;
            m_tx_index &= TX_BUFFER_MASK;
        }
        else
        {
            Y_SPRINTF("[ble_uico]: SD Read/Write API returns error. This message sending will be "
                "attempted again..");
        }
    }
}

/*********************************************************************
 * @fn      tx_send
 *
 * @brief   send message 
 *
 * @param   task_id,message_type.
 *
 * @return  LX_OK ,LX_OK
 */
static void tx_send(ble_uico_t * p_ble_nus_c, uint16_t handle, char *str , uint16_t len)
{
    tx_message_t * p_msg;
    if (len > 20) {
        return ;
    }
    //????
    p_msg = &m_tx_buffer[m_tx_insert_index++];
    m_tx_insert_index &= 0x07;
    //????
    p_msg->req.write_req.gattc_params.handle = handle;
        
    Y_SPRINTF("[ble uico]: sended handle= %d lenth = %d", p_msg->req.write_req.gattc_params.handle,len);
    p_msg->req.write_req.gattc_params.len = len;
    //??
    p_msg->req.write_req.gattc_params.p_value = p_msg->req.write_req.gattc_value;
    p_msg->req.write_req.gattc_params.offset = 0;
    //???
    p_msg->req.write_req.gattc_params.write_op = BLE_GATT_OP_WRITE_REQ;
    //????
    p_msg->conn_handle = p_ble_nus_c->conn_handle;
    //???????
    p_msg->type = WRITE_REQ;
    memcpy(p_msg->req.write_req.gattc_value, str, len);
    //????
    tx_buffer_process();
}